
@inject DotaznikCreateService dotaznikCreateService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager

@page "/questionareEdit"
@using Satisfy.Shared.Form
@using Satisfy.Web.Data

<style>
    .stin-horni {
        -webkit-box-shadow: -12px -9px 11px -1px rgba(0,0,0,0.25);
        -moz-box-shadow: -12px -9px 11px -1px rgba(0,0,0,0.25);
        box-shadow: -12px -9px 11px -1px rgba(0,0,0,0.25);
    }

    ul {
        list-style: none;
    }

    li {
        padding-bottom: 1em;
        list-style: none;
    }

    body {
        /*background-image: url(images/backgr.jpg);*/
        background-size: cover;
        background-attachment: fixed;
    }

    .mySidenav-style {
        text-align: center;
    }

    .form-check {
        padding-left: 0px;
    }
</style>

<div id="stranka_dotaznik" class="container">
    <li id="otazkaDefault" class="ui-state-default" style="padding-top: 2em; visibility:hidden;" runat="server">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <div class="row">
                    <div class="col-10">
                        <input type="text" class="form-control" placeholder="Otázka" />

                    </div>
                    <div class="col">
                        <img onclick="deleteCard(event)" width="20px;" src="https://img.icons8.com/ios-filled/50/000000/minus.png" />



                    </div>
                </div>


            </div>

            <ul id="odpovedi" runat="server" class="card-body">
                <li id="doplnovatko">
                    <div id="dropDownList" class="dropdown">
                        <img class="dropdown-toggle" data-toggle="dropdown" src="https://img.icons8.com/ios-filled/24/000000/plus.png" />
                        <div class="dropdown-menu">
                            <span class="dropdown-item" onclick="addToList(event); return;">
                                <div id="txtDefaultDiv">
                                    <input type="text" id="txtDefault1" class="element-list form-control">
                                </div>
                            </span>
                            <span class="dropdown-item" onclick="addToList(event); return;">
                                <div id="checkTextDefaultDiv" class="element-list form-check">
                                    <label class="form-check-label form-check-inline ">
                                        <input type="checkbox" class="form-check-input" value=""><input type="text" id="checkTextDefault" />
                                    </label>
                                </div>
                            </span>
                            <span class="dropdown-item" onclick="addToList(event); return;">
                                <div id="radioTextDefaultDiv" class="element-list form-check">
                                    <label class="form-check-label form-check-inline ">
                                        <input type="radio" class="form-check-input" value=""><input type="text" id="radioTextDefault" />
                                    </label>
                                </div>
                            </span>
                        </div>
                    </div>
                </li>

            </ul>

        </div>
    </li>



    <!-- Add all page content inside this div if you want the side nav to push page content to the right (not used if you only want the sidenav to sit on top of the page -->
    <div id="main">


        <div id="div1" class="stin-horni" style="width: 100%; height: auto; padding: 10px; border: 1px solid #aaaaaa; visibility:visible; background-color: rgba(255, 255, 255, 0.8);">
            <input type="text" class="form-control" id="nazevDotazniku" />
            <ul id="sortable" class="pokusna">
            </ul>

        </div>

        <hr />
        @* <div id="div2" ondrop="dropDel(event)" ondragover="allowDrop(event)" style="width: 350px; height: 70px; padding: 10px; border: 1px solid #ff0000; background-color: rgba(249, 44, 44, 0.8);"></div>*@

        <div class="row">
            <div class="col-sm-6">
                <!--input id="pridatKartu" type="button" class="btn btn-primary form-control" value="Nacist dotaznik" @onclick="Click"-->
            </div>

            <div class="col-sm-6">
                <input id="pridatKartu" type="button" class="btn btn-primary form-control" onclick="pridejCard()" value="Add card">
            </div>
            <div class="col-sm-6">
                <p></p>
            </div>
            <div class="col-sm-6">
                <p></p>
            </div>
            <div class="col-sm-6">
                <input id="saveQuestionare" type="button" class="btn btn-success form-control" value="Save" @onclick="CreateDotaznik">
            </div>
            <div class="col-sm-6">
                <input id="cancelEdit" type="button" class="btn btn-secondary form-control" value="Cancel" @onclick="CancelQuest">
            </div>
        </div>

        <br />


    </div>

</div>



@code{
    int UserID = -1;
    int dotaznikID = -1;

    QuestionnaireGetResponse questionnaire = new QuestionnaireGetResponse();
    //string Response;

    async Task LoadDotaznik()
    {

        var response = await dotaznikCreateService.DotaznikLoad(dotaznikID);
        questionnaire = response;

    }

    async Task CreateDotaznik()
    {
        var dotaznikObj = await JSRuntime.InvokeAsync<QuestionnaireUpdateRequest.QuestionnaireUpdate>("SaveQuestions");
        dotaznikObj.UserId = UserID;
        dotaznikObj.StartDate = DateTime.Now;
        dotaznikObj.QuestionnaireId = dotaznikID;


        await dotaznikCreateService.DotaznikUpdate(new QuestionnaireUpdateRequest
        {
            Questionnaire = dotaznikObj
        });


        //Response = response.ErrMsg;

        //volání JS FUNKCE

        CancelQuest();

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dotaznikID = await JSRuntime.InvokeAsync<int>("DotaznikGet");
            UserID = await JSRuntime.InvokeAsync<Int32>("LoginGet");
        }
        catch { }

        await LoadDotaznik();
        Click();

    }

    public async void CancelQuest()
    {
        dotaznikID = -1;

        //SMAZZAT dotaznikID ZE PAMĚTI -> BUDEM VYBÍRAT JINÝ DOTAZNÍK
        await JSRuntime.InvokeVoidAsync("DotaznikSet", dotaznikID);

        NavigationManager.NavigateTo("questionare-list");
    }

    protected void Click()
    {

        @if (questionnaire != null)
        {
            JSRuntime.InvokeVoidAsync("newNazevDotaznikuEdit", questionnaire.Questionnaire.Name);

            @for (var i = 0; i < questionnaire.Questionnaire.Question.Count; i++)
            {
                //vlož novou card (otazku)   = pridejCard()
                // dej ji value questionnaire.Questions[@i].Text
                JSRuntime.InvokeVoidAsync("newCardEdit", questionnaire.Questionnaire.Question[@i].Text);

                @for (var j = 0; j < questionnaire.Questionnaire.Question[@i].Answer.Count; j++)
                {
                    int typ = questionnaire.Questionnaire.Question[@i].Answer[@j].Type;

                    switch (typ)
                    {
                        case 0:
                            //vlož k otazce prvek textfield  = addToList(event)
                            // jeho velue pridej text : questionnaire.Questions[@i].Answers[@j].Text;
                            JSRuntime.InvokeVoidAsync("newInputEdit", questionnaire.Questionnaire.Question[@i].Answer[@j].Text);
                            break;
                        case 1:
                            //vloz k otazce prvek chheckbox  = addToList(event)
                            // jeho velue pridej text : questionnaire.Questions[@i].Answers[@j].Text;
                            JSRuntime.InvokeVoidAsync("newCheckEdit", questionnaire.Questionnaire.Question[@i].Answer[@j].Text);
                            break;

                        case 2:
                            //vloz k otazce prvek radiobutton  = addToList(event)
                            // jeho velue pridej text : questionnaire.Questions[@i].Answers[@j].Text;
                            JSRuntime.InvokeVoidAsync("newRadioEdit", questionnaire.Questionnaire.Question[@i].Answer[@j].Text);
                            break;
                    }

                }
            }
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("LogedInCheck");

    }
}






